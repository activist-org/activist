name: pr_ci_backend
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
    paths:
      - "backend/**"
  push:
    branches:
      - main
    paths:
      - "backend/**"

env:
  SECRET_KEY: "ONLY_FOR_TESTING"
  DATABASE_PORT: 5432
  DATABASE_HOST: localhost
  DATABASE_NAME: postgres
  DATABASE_USER: postgres
  DATABASE_PASSWORD: postgres

jobs:
  backend:
    services:
      postgres:
        image: postgres:15
        env:
            POSTGRES_USER: ${{ env.DATABASE_USER }}
            POSTGRES_PASSWORD: ${{ env.DATABASE_PASSWORD }}
            POSTGRES_DB: ${{ env.DATABASE_NAME }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    permissions:
      contents: write
      checks: write
      pull-requests: write

    name: Run PR Backend Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Set up Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Create Environment and Install Dependencies
        run: |
          python -m pip install --upgrade uv
          uv venv
          . .venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV
          uv pip install -r backend/requirements-dev.txt

      - name: Run Ruff Format - Formatting Check
        run: ruff format ./backend

      - name: Run Ruff - Linting and Import Sorting Check
        if: always()
        run: ruff check ./backend

      - name: Run mypy - Static Type Checking
        if: always()
        run: mypy ./backend --config-file ./backend/pyproject.toml

      - name: Run Django Migrations - Database Migrations Check
        if: always()
        run: |
          . .venv/bin/activate
          python ./backend/manage.py makemigrations
          python ./backend/manage.py migrate

      - name: Run pytest - Unit Tests
        if: always()
        run: |
          pytest ./backend --cov=./backend --cov-report=term-missing --cov-fail-under=80 --cov-config=./backend/pyproject.toml -vv

      - name: Login to Docker Hub
        if: ${{ github.ref == 'refs/heads/main' && success() }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        if: ${{ github.ref == 'refs/heads/main' && success() }}
        run: |
          git_short_sha = %{git rev-parse --short HEAD}

          echo "Building ativist backend image."
          docker build --build-arg env=prod -t activist_backend:latest -t activist_backend:${git_short_sha} .

          echo "Tagging image with ${git_short_sha}, latest."
          docker tag activist_backend:latest ${{ secrets.DOCKERHUB_USERNAME }}/activist-backend:latest
          docker tag activist_backend:${git_short_sha} ${{ secrets.DOCKERHUB_USERNAME }}/activist-backend:${git_short_sha}

          echo "Pushing image to docker repo."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/activist-backend:latest

      # - name: Build and push Docker image
      #   if: ${{ github.ref == 'refs/heads/main' && success() }}
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: ./backend
      #     push: true
      #     tags: ${{ secrets.DOCKERHUB_USERNAME }}/activist-backend:latest
      #     build-args: |
      #       ENV=prod

      - name: Create Tag
        if: ${{ github.ref == 'refs/heads/main' && success() }}
        run: |
          git_short_sha = %{git rev-parse --short HEAD}

          echo "Creating git tag with ${git_short_sha}."
          git tag v${git_short_sha}
          git push origin v${git_short_sha}
